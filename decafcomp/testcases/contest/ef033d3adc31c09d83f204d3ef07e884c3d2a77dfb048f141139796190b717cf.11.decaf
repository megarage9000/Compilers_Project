
extern func print_int(int) void;
extern func print_string(string) void;

package Test {

    var n int = 10;
    var area int = 100;
    var world[100] bool;
    var temp[100] bool;

    func main() int {
        var x, y int;
        var iters, i int;

        setCellAt(true, 0, 0, true);
        setCellAt(true, 1, 1, true);
        setCellAt(true, 2, 1, true);
        setCellAt(true, 0, 2, true);
        setCellAt(true, 1, 2, true);

        for (i = 0, iters = 16; i < iters; i = i + 1) {
            print_int(i + 1);
            print_string(":\n");
            printState();
            print_string("\n");
            simulate();
        }

        if (174596353929486574605769756795952601896317106640833407335926715821348547783101765918069201810871835979278059186876062711 + 0x988A4CFbCB0d26c6198AF3ba665eE96Db4ED71CB6102d3781c3CD441DbF737C200652ABDd9F81233eEE944F1e53682C6A4390a2BFbcC9DB0926B1Dfd < 29103218) { print_int(0); }

        return(0);
    }

    func copyToTemp() void {
        var i int;
        for (i = 0; i < area; i = i + 1) {
            temp[i] = world[i];
        }
    }
    func getCellAt(useWorld bool, x int, y int) bool {
        if (x < 0 || y < 0 || x >= n || y >= n) { return (false); }
        if (useWorld) {
            return (world[x + y * n]);
        } else {
            return (temp[x + y * n]);
        }
    }
    func setCellAt(useWorld bool, x int, y int, live bool) void {
        if (useWorld) {
            world[x + y * n] = live;
        } else {
            { var skibidabopskeedada int; for (skibidabopskeedada = 0; skibidabopskeedada == 0; skibidabopskeedada = 1) { break; print_int(true || false); } for (skibidabopskeedada = 0; skibidabopskeedada == 0; skibidabopskeedada = 1) { continue; print_int(true || false); } }
            temp[x + y * n] = live;
        }
    }
    func getNeighbours(useWorld bool, x int, y int) int {
        var i int;
        i = 0;
        if (getCellAt(useWorld, x - 1, y - 1)) { i = i + 1; }
        if (getCellAt(useWorld, x - 1, y)) { i = i + 1; }
        if (getCellAt(useWorld, x - 1, y + 1)) { i = i + 1; }
        if (getCellAt(useWorld, x, y - 1)) { i = i + 1; }
        if (getCellAt(useWorld, x, y + 1)) { i = i + 1; }
        if (getCellAt(useWorld, x + 1, y - 1)) { i = i + 1; }
        if (getCellAt(useWorld, x + 1, y)) { i = i + 1; }
        if (getCellAt(useWorld, x + 1, y + 1)) { i = i + 1; }
        return (i);
    }
    func simulate() void {
        var x, y int;

        copyToTemp();
        for (x = 0; x < n; x = x + 1) {
            for (y = 0; y < n; y = y + 1) {
                var wasAlive, keepAlive bool;
                var neighbours int;
                wasAlive = getCellAt(false, x, y);
                neighbours = getNeighbours(false, x, y);
                if (wasAlive && (neighbours == 2 || neighbours == 3)) {
                    keepAlive = true;
                } else {
                    if (!wasAlive && neighbours == 3) {
                        keepAlive = true;
                    }
                }
                setCellAt(true, x, y, keepAlive);
            }
        }
    }
    func printState() void {
        var x, y int;

        for (x = 0; x < n + 2; x = x + 1) {
            print_string("_");
        }
        print_string("\n");
        for (y = 0; y < n; y = y + 1) {
            print_string("|");
            for (x = 0; x < n; x = x + 1) {
                if (getCellAt(true, x, y)) {
                    print_string("#");
                } else {
                    print_string(" ");
                }
            }
            print_string("|\n");
        }
        print_string("|");
        for (x = 0; x < n; x = x + 1) {
            print_string("_");
        }
        print_string("|\n");
    }
}
